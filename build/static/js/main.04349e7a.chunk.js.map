{"version":3,"sources":["redux/Auth/AuthConstant.js","redux/Auth/AuthReducer.js","redux/default/changeStateConstants.js","redux/default/changeState.js","redux/rootReducer.js","store.js","App.js","serviceWorker.js","index.js"],"names":["authConstant","LOGIN_REQUEST","initialState","is_auth","department","AuthReducer","state","action","type","payload","sidebarShow","changeState","rest","rootReducer","combineReducers","auth","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","loading","className","DefaultLayout","React","lazy","Login","Page404","Page500","App","Component","render","Suspense","fallback","exact","path","name","props","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4KACA,kCAAO,MAAMA,EAAa,CACxBC,cAAc,kB,6gCCAhB,MAAMC,EAAa,CACjBC,SAAQ,EACRC,WAAW,IAeEC,MAXI,CAACC,EAAMJ,EAAaK,IAC7BA,EAAOC,OACRR,IAAaC,cAAoB,IACjCK,EAAMH,SAAQ,EAAKC,WAAWG,EAAOE,SAI1BH,ECdb,MCCDJ,EAAe,CACnBQ,aAAa,GAcAC,MAXK,CAACL,EAAQJ,GAAgBM,UAASI,KAI7C,QADCJ,EAEG,IAAKF,KAASM,GAEdN,ECRN,MAAMO,EAAYC,YAAgB,CACvCC,KAAKV,EACLM,YAAYA,ICACK,MAJDC,YACZJ,EACAK,OAAOC,8BAAgCD,OAAOC,gC,QCChD,MAAMC,EACJ,qBAAKC,UAAU,mBAAf,SACE,qBAAKA,UAAU,kCAKbC,EAAgBC,IAAMC,MAAK,IAAM,6DAGjCC,EAAQF,IAAMC,MAAK,IAAM,uDAEzBE,EAAUH,IAAMC,MAAK,IAAM,uDAC3BG,EAAUJ,IAAMC,MAAK,IAAM,uDAEjC,MAAMI,UAAYC,YAChBC,SACE,OACE,cAAC,IAAD,CAAUd,MAAOA,EAAjB,SACE,cAAC,IAAD,UACE,cAAC,IAAMe,SAAP,CAAgBC,SAAUZ,EAA1B,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOa,OAAK,EAACC,KAAK,SAASC,KAAK,aAAaL,OAASM,GAAU,cAACX,EAAD,IAAWW,MAC3E,cAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,OAAOC,KAAK,WAAWL,OAASM,GAAU,cAACV,EAAD,IAAaU,MACzE,cAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,OAAOC,KAAK,WAAWL,OAASM,GAAU,cAACT,EAAD,IAAaS,MACzE,cAAC,IAAD,CAAOF,KAAK,IAAIC,KAAK,OAAOL,OAASM,GAAU,cAACd,EAAD,IAAmBc,gBASjER,QC9BKS,QACW,cAA7BnB,OAAOoB,SAASC,UAEe,UAA7BrB,OAAOoB,SAASC,UAEhBrB,OAAOoB,SAASC,SAASC,MAAM,2DCNnCC,IAASX,OACP,cAAC,IAAD,CAAUd,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEF0B,SAASC,eAAe,SDwGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAMC,IAClCA,EAAaC,kB","file":"static/js/main.04349e7a.chunk.js","sourcesContent":["\nexport const authConstant={\n  LOGIN_REQUEST:\"LOGIN_REQUEST\",\n}\n","import { authConstant } from \"./AuthConstant\";\n\nconst initialState={\n  is_auth:false,\n  department:\"\"\n}\n\n\n const AuthReducer=(state=initialState,action)=>{\n  switch (action.type) {\n    case authConstant.LOGIN_REQUEST:return{\n      ...state,is_auth:true,department:action.payload\n    }\n\n\n    default: return state\n  }\n}\n\nexport default AuthReducer\n","\nexport const changeStateConstant = {\n  set:\"set\"\n}\n","import { changeStateConstant } from \"./changeStateConstants\"\n\nconst initialState = {\n  sidebarShow: true,\n}\n\nconst changeState = (state = initialState, { type, ...rest }) => {\n\n\n  switch (type) {\n    case 'set':\n      return { ...state,...rest }\n    default:\n      return state\n  }\n}\n\nexport default changeState\n","import { combineReducers } from \"redux\";\nimport  AuthReducer  from \"./Auth/AuthReducer\";\nimport changeState from \"./default/changeState\";\n\n\nexport const rootReducer=combineReducers({\n  auth:AuthReducer,\n  changeState:changeState\n})\n","import { createStore } from 'redux'\nimport { rootReducer } from './redux/rootReducer'\n\nconst store = createStore(\n  rootReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n)\nexport default store\n","import React, { Component } from 'react'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport './scss/style.scss'\nimport store from './store'\n\nconst loading = (\n  <div className=\"pt-3 text-center\">\n    <div className=\"sk-spinner sk-spinner-pulse\"></div>\n  </div>\n)\n\n// Containers\nconst DefaultLayout = React.lazy(() => import('./layout/DefaultLayout'))\n\n// Pages\nconst Login = React.lazy(() => import('./views/pages/login/Login'))\nconst Register = React.lazy(() => import('./views/pages/register/Register'))\nconst Page404 = React.lazy(() => import('./views/pages/page404/Page404'))\nconst Page500 = React.lazy(() => import('./views/pages/page500/Page500'))\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <BrowserRouter>\n          <React.Suspense fallback={loading}>\n            <Switch>\n              <Route exact path=\"/login\" name=\"Login Page\" render={(props) => <Login {...props} />} />\n              <Route exact path=\"/404\" name=\"Page 404\" render={(props) => <Page404 {...props} />} />\n              <Route exact path=\"/500\" name=\"Page 500\" render={(props) => <Page500 {...props} />} />\n              <Route path=\"/\" name=\"Home\" render={(props) => <DefaultLayout {...props} />} />\n            </Switch>\n          </React.Suspense>\n        </BrowserRouter>\n      </Provider>\n    )\n  }\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ',\n          )\n        })\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.')\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import 'react-app-polyfill/stable'\nimport 'core-js'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}